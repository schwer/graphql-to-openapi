{"version":3,"sources":["logo.svg","GraphQLEditor.tsx","textAreaStyles.ts","GraphQLToOpenApiDocs.tsx","serviceWorker.ts","index.tsx"],"names":["GraphQLEditor","errors","onChange","value","annotations","map","message","locations","annotation","text","row","line","column","type","mode","setOptions","useWorker","enableBasicAutocompletion","enableLiveAutocompletion","tabSize","width","height","style","fontSize","border","borderRadius","textAreaStyles","fontFamily","resize","GraphQLToOpenApiDocs","openApiSchema","schemaError","queryErrors","savedSchemaString","localStorage","getItem","savedInputQuery","useState","schemaString","setSchemaString","inputQuery","setInputQuery","outputType","setOutputType","useEffect","setItem","result","graphqlToOpenApi","schema","Source","query","onUnknownScalar","err","success","stringify","JSON","parse","className","src","logo","alt","href","Form","Group","Label","undefined","marginBottom","InputGroup","size","Prepend","Button","disabled","variant","ToggleButtonGroup","name","ToggleButton","textAlign","readOnly","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.1cc6527a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.db5d4e82.svg\";","import React from 'react';\nimport AceEditor from 'react-ace';\nimport { Ace } from 'ace-builds';\nimport { GraphQLError } from 'graphql';\nimport 'ace-builds/src-noconflict/mode-graphqlschema';\nimport 'ace-builds/src-noconflict/theme-github';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\n\nfunction graphQLErrorToAnnotations(\n  graphQLErrors: readonly GraphQLError[]\n): Ace.Annotation[] {\n  const annotations = graphQLErrors.map(({ message, locations }) => {\n    const annotation = {\n      text: message,\n      row: locations?.[0].line ?? 0,\n      column: locations?.[0].column ?? 0,\n      type: 'error',\n    };\n    annotation.row--;\n    return annotation;\n  });\n  return annotations;\n}\n\nexport const GraphQLEditor: React.FC<{\n  errors: readonly GraphQLError[] | undefined;\n  onChange: (value: string) => void;\n  value: string;\n}> = ({ errors, onChange, value }) => {\n  const annotations = errors ? graphQLErrorToAnnotations(errors) : [];\n\n  return (\n    <>\n      <AceEditor\n        mode=\"graphqlschema\"\n        annotations={annotations}\n        setOptions={{\n          useWorker: false,\n          enableBasicAutocompletion: true,\n          enableLiveAutocompletion: true,\n          tabSize: 2,\n        }}\n        value={value}\n        onChange={onChange}\n        width=\"100%\"\n        height=\"100%\"\n        style={{\n          fontSize: '10px',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n        }}\n      />\n    </>\n  );\n};\n","import { CSSProperties } from 'react';\n\nexport const textAreaStyles: CSSProperties = {\n  fontFamily: 'Consolas, monospace, sans-serif',\n  fontSize: 11,\n  height: '100%',\n  resize: 'none',\n  width: '100%',\n};\n","import React, { useState, useEffect } from 'react';\nimport { GraphQLError, Source } from 'graphql';\nimport {\n  Button,\n  InputGroup,\n  Form,\n  ToggleButtonGroup,\n  ToggleButton,\n} from 'react-bootstrap';\nimport { graphqlToOpenApi } from 'graphql-to-openapi';\nimport { CheckIcon } from '@primer/octicons-react';\nimport { stringify } from 'yaml';\nimport logo from './logo.svg';\nimport { GraphQLEditor } from './GraphQLEditor';\nimport './GraphQLToOpenApiDocs.scss';\nimport { textAreaStyles } from './textAreaStyles';\n\nexport const GraphQLToOpenApiDocs: React.FC = () => {\n  const defaultSchema = `type Query {\n  query: Query\n\n  \"\"\"\n  An array of strings\n  \"\"\"\n  arrayOfStrings(\n    input: String!,\n    otherInput: String!\n  ): [String!]!\n}`;\n  const defaultQuery = `query scalarQuery (\n  $input: String!,\n  $otherInput: String!\n) {\n  arrayOfStrings(input: $input, otherInput: $otherInput)\n}`;\n\n  const savedSchemaString = localStorage.getItem(\n    'graphql-to-openapi:schemaString'\n  );\n  const savedInputQuery = localStorage.getItem('graphql-to-openapi:inputQuery');\n\n  const [schemaString, setSchemaString] = useState(\n    savedSchemaString ?? defaultSchema\n  );\n  const [inputQuery, setInputQuery] = useState(savedInputQuery ?? defaultQuery);\n  const [outputType, setOutputType] = useState('YAML');\n\n  useEffect(() => {\n    localStorage.setItem('graphql-to-openapi:schemaString', schemaString);\n  }, [schemaString]);\n\n  useEffect(() => {\n    localStorage.setItem('graphql-to-openapi:inputQuery', inputQuery);\n  }, [inputQuery]);\n\n  let openApiSchema;\n  let schemaError: GraphQLError | undefined;\n  let queryErrors;\n  try {\n    const result = graphqlToOpenApi({\n      schema: new Source(schemaString, 'Schema'),\n      query: inputQuery,\n      onUnknownScalar() {\n        return { type: 'string' };\n      },\n    });\n    openApiSchema = result.openApiSchema;\n    schemaError = result.schemaError;\n    queryErrors = result.queryErrors;\n  } catch (err) {\n    schemaError = err as GraphQLError;\n  }\n  const success = !schemaError && !queryErrors;\n  let value = '';\n  if (openApiSchema && outputType === 'YAML') {\n    value = stringify(JSON.parse(JSON.stringify(openApiSchema)));\n  } else if (openApiSchema) {\n    value = JSON.stringify(openApiSchema, null, 2);\n  }\n  return (\n    <div className=\"GraphQLToOpenApiDocs\">\n      <div className=\"container-fluid\">\n        <header className=\"GraphQLToOpenApiDocs-header\">\n          <img\n            height={50}\n            src={logo}\n            className=\"GraphQLToOpenApiDocs-logo\"\n            alt=\"logo\"\n          />\n          <a\n            className=\"float-right\"\n            href=\"https://npmjs.com/graphql-to-openapi\"\n          >\n            <img\n              alt=\"npm link\"\n              src=\"https://img.shields.io/npm/v/graphql-to-openapi.svg\"\n            />\n          </a>\n        </header>\n        <div style={{ height: 'calc(50vh - 100px)' }} className=\"row\">\n          <div className=\"col\">\n            <Form.Group style={{ height: '100%' }}>\n              <Form.Label>GraphQL Schema</Form.Label>\n              <GraphQLEditor\n                errors={schemaError ? [schemaError] : undefined}\n                onChange={setSchemaString}\n                value={schemaString}\n              />\n            </Form.Group>\n          </div>\n          <div className=\"col\">\n            <Form.Group style={{ height: '100%' }}>\n              <Form.Label>GraphQL Query</Form.Label>\n              <GraphQLEditor\n                errors={queryErrors}\n                onChange={setInputQuery}\n                value={inputQuery}\n              />\n            </Form.Group>\n          </div>\n        </div>\n        <p>&nbsp;</p>\n        <div className=\"row\" style={{ height: 'calc(50vh - 50px)' }}>\n          <div className=\"col\">\n            <div className=\"row\" style={{ marginBottom: 5 }}>\n              <InputGroup size=\"sm\" className=\"col\">\n                <InputGroup.Prepend>\n                  <Button disabled variant=\"link\">\n                    OpenAPI Schema\n                  </Button>\n                </InputGroup.Prepend>\n                <ToggleButtonGroup\n                  name=\"outputType\"\n                  type=\"radio\"\n                  size=\"sm\"\n                  value={outputType}\n                  onChange={setOutputType}\n                >\n                  <ToggleButton value=\"YAML\">YAML</ToggleButton>\n                  <ToggleButton value=\"JSON\">JSON</ToggleButton>\n                </ToggleButtonGroup>\n              </InputGroup>\n              {!success ? (\n                <span className=\"col\" style={{ textAlign: 'right' }}>\n                  <span\n                    className=\"spinner-grow\"\n                    style={{ width: '1em', height: '1em' }}\n                  >\n                    <span className=\"sr-only\">Loading...</span>\n                  </span>{' '}\n                  Waiting for valid schema and query...\n                </span>\n              ) : (\n                <span className=\"col\" style={{ textAlign: 'right' }}>\n                  <CheckIcon />\n                </span>\n              )}\n            </div>\n            {openApiSchema ? (\n              <textarea\n                className=\"form-control\"\n                readOnly\n                style={textAreaStyles}\n                value={value}\n              />\n            ) : (\n              <textarea\n                readOnly\n                disabled\n                style={textAreaStyles}\n                className=\"form-control\"\n                placeholder=\"Please supply a schema and query above\"\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphQLToOpenApiDocs;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GraphQLToOpenApiDocs } from './GraphQLToOpenApiDocs';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GraphQLToOpenApiDocs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}